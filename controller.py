import customtkinter as ctk
from PIL import Image
from entities import Tag, Timeline, Base, Photo
from sqlalchemy import create_engine
from sqlalchemy.orm import Session
import io

engine = create_engine('sqlite:///:memory:', echo=True)
Base.metadata.create_all(engine)
sess = Session(engine)


class Database:

    def add_image(self, **kwargs):
        if "from_default_set" in kwargs:
            default_image = kwargs.pop("from_default_set")

        if default_image == "plus":
            plus = Photo(
                caption="plus",
                data=b'\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x01v\x00\x00\x01\x04\x08\x06\x00\x00\x00<\xb4\x1f\xaf\x00\x00\x00\x01sRGB\x00\xae\xce\x1c\xe9\x00\x00\x00\x04gAMA\x00\x00\xb1\x8f\x0b\xfca\x05\x00\x00\x00\tpHYs\x00\x00\x0e\xc3\x00\x00\x0e\xc3\x01\xc7o\xa8d\x00\x00\x06\x14IDATx^\xed\xdc?h\x14i\x18\xc0\xe1o\x17\xb2*B0\x8dD#\x98E\x04m\xacD,R\xa9\xc7\ng\xa3\xb5B*\x1b\rVB\xcak\xd4ClT\xac\xac\xa2\x8d"F\xb0\xb3\x10,l\xb4\x11lt\x9b\x0b\xa2!\xd8-Z\n\x99\xcb\x8c_\xb8\xe0\xed\xa9\x98\xe4t\xde}\x9e&\xef7\x03\x8b&\xe4\xb7\x7f\xe6\x9b4\xba\xddn\x91\x80Zj\xb5Z#\xedv\xbb\x97\x97Pi\xe6\xaf\x00\x04!\xec\x00\xc1\x08;@0\xc2\x0e\x10\x8c\xb0\x03\x04#\xec\x00\xc1\x08;@0\xc2\x0e\x10\x8c\xb0\x03\x04#\xec\x00\xc1\x08;@0\xc2\x0e\x10\x8c\xb0\x03\x04#\xec\x00\xc1\x08;@0\xc2\x0e\x10\x8c\xb0\x03\x04#\xec\x00\xc1\x08;@0\xc2\x0e\x10\x8c\xb0\x03\x04#\xec\x00\xc1\x08;@0\xc2\x0e\x10\x8c\xb0\x03\x04#\xec\x00\xc1\x08;@0\xc2\x0e\x10\x8c\xb0\x03\x04#\xec\x00\xc1\x08{\x00O\x9e<I\xe7\xce\x9dK\x9dN\'MNN\xa6\xbbw\xef\xa6\xc5\xc5\xc5|\x16\x184\x8dn\xb7[\xe4\x99\x1a\xbay\xf3f\xbar\xe5J^\xfdcbb"\xdd\xb8q#m\xdc\xb81\x1f!\xa2V\xab5\xd2n\xb7{y\t\x15\xaf\xd8k\xec\xe5\xcb\x97}\xa3^z\xfa\xf4i\x9a\x99\x99\xc9+`\x90\x08{\x8d\xcd\xce\xce\xe6\xa9\xbf;w\xee\xe4\t\x18$\xc2^csssy\xeaoaa!O\xc0 \x11\xf6\x1a\xfb\xd6\x05\xd2\xa2p\xf9\x04\x06\x91\xb0\x03\x04#\xec\x00\xc1\x08;@0\xc2\x0e\x10\x8c\xb0\x03\x04#\xec\x00\xc1\x08;@0\xc2\x0e\x10\x8c\xb0\x03\x04#\xec\x00\xc1\x08;@0\xc2\x0e\x10\x8c\xb0\x03\x04#\xec\x00\xc1\x08;@0\xc2\x0e\x10\x8c\xb0\x03\x04#\xec\x00\xc1\x08;@0\xc2\x0e\x10\x8c\xb0\x03\x04#\xec\x00\xc1\x08;@0\xc2\x0e\x10\x8c\xb0\x03\x04#\xec\x00\xc1\x08;@0\xc2\x0e\x10\x8c\xb0\x03\x04#\xec\x00\xc1\x08;@0\xc2\x0e\x10\x8c\xb0\x03\x04#\xec}\xcc\xcf\xcf\xa7\x8b\x17/\xa6S\xa7N\xa53g\xce\xa4\xd9\xd9\xd9|\xa6\xfe\x9e={\xb6.\xff\x9f\xe9\xe9\xe9\xf4\xfc\xf9\xf3\xbc\x02~\xa6F\xb7\xdb-\xf2\xcc\x92W\xaf^U1?q\xe2D:p\xe0@\x15\xf9\xabW\xaf\xa6\x89\x89\x894::\x9a\x8a\xe2\xc7\xbe]\xaf_\xbf\xae\x1e\xeb\xf0\xe1\xc3\xf9\xc8\xea=x\xf0\xa0z\xcc\xaf9{\xf6l\x9e>[\x8f\x7fG\xe9{\x1fw\xc3\x86\r\xe9\xe0\xc1\x83i\xdf\xbe}\xf9\x08\xab\xd1j\xb5F\xda\xedv//\xa1"\xec_8t\xe8P\x9a\x9a\x9aJ\xc7\x8f\x1f\xaf\xd6\xb7n\xddJ\x97/_N\x9f>}\xaa\xd6\xac\x8dN\xa7\x93.]\xba\x946o\xde\x9c\x8f\xf0#\x84\x9d~|\x14\xb3B\xf9j\xbd\xb4\x1c\xf5\x87\x0f\x1f\xa6\x0b\x17.\x88\xfa:x\xf4\xe8Q\xf5\xbd\x05\xd6\x9e\xb0\xaf\xf0\xf1\xe3\xc7466\x96W)\xdd\xbbw/O\xac\x87\xfb\xf7\xef\xe7\tXK\xc2\xfe\x852\xee\x00u&\xec+\xec\xd9\xb3\xa7\xba\x00\xf8\xe1\xc3\x87|\x04\xa0~\x84}\x85\xe1\xe1\xe1\xea\xf3\xf5r\xabci\xcb\x96-\xd5W\xd6\xc7\xd0\xd0P\x9e\x80\xb5$\xec_X\xde\x1eX\xee\x8ey\xfb\xf6m5\xb3>\xce\x9f?\x9f\'`-\xd9\xee\xf8\x1f\xca\x1d2\xcb{\xc4\xaf_\xbf^\xed\xd3fm\x94\xef\x84\xca-\xa5\'O\x9e\xccG\xf8Q\xb6;\xd2\x8f\xb0\x7f\xa77o\xde\xa4\xf7\xef\xdf\xe7\xd5\xaf\xa1\xdc.\xf8\xad\'\x9c\xdb\xb7o\xe7i\xf5\xca\xbbK\xf7\xee\xdd[\xdd\x84T>\xe9\xcd\xcc\xcc\xa4\xc9\xc9\xc9\xeaF\xae\xf2\xc9\xef\xc8\x91#\xd5\xf9\xaf\x19\x19\x19I\xbbv\xedJ\xcd\xa67\x8bkA\xd8\xe9G\xd8k\xac\xfc\x93\x07\xdf\xba\x8d\x7f\xe9\xe7\x9b\xa7\xd5+c^^\x7fx\xf7\xee]u=\xa2\xbc;wy\xcf??\x87\xb0\xd3\x8f\xb0\xd7\xd8\xff\x1dv~=\xc2N?\xde\x0f\x03\x04#\xec\x00\xc1\x08;@0\xc2\x0e\x10\x8c\xb0\x03\x04#\xec\x00\xc1\x08;@0\xc2\x0e\x10\x8c\xb0\x03\x04#\xec\x00\xc1\x08;@0\xc2\x0e\x10\x8c\xb0\x03\x04#\xec\x00\xc1\x08;@0\xc2\x0e\x10\x8c\xb0\x03\x04#\xec\x00\xc1\x08;@0\xc2\x0e\x10\x8c\xb0\x03\x04#\xec\x00\xc1\x08;@0\xc2\x0e\x10\x8c\xb0\x03\x04#\xec\x00\xc1\x08;@0\xc2\x0e\x10\x8c\xb0\x03\x04#\xec\x00\xc1\x08;@0\xc2\x0e\x10\x8c\xb0\x03\x04#\xec5\xb6i\xd3\xa6<\xf5\xd7l\xfa\xf1\xc2 \xf2\x9b_c\xfb\xf7\xef\xcfS\x7f\xbbw\xef\xce\x130H\x84\xbd\xc6:\x9dN\x1a\x1e\x1e\xce\xab\x7f;}\xfat\x9e\x80A"\xec5\xb6s\xe7\xcet\xed\xda\xb5\xb4u\xeb\xd6|\xe4\xb3\xa1\xa1\xa1455\x95\x8e\x1d;\x96\x8f\x00\x83\xa4\xd1\xedv\x8b<SS\xbd^/=~\xfc8\xbdx\xf1"\xed\xd8\xb1#\x1d=z4\x8d\x8f\x8f\xe7\xb3D\xd6j\xb5F\xda\xedv//\xa1"\xecPc\xc2N?>\x8a\x01\x08F\xd8\x01\x82\x11v\x80`\x84\x1d \x18a\x07\x08F\xd8\x01\x82\x11v\x80`\x84\x1d \x18a\x07\x08F\xd8\x01\x82\x11v\x80`\x84\x1d \x18a\x07\x08F\xd8\x01\x82\x11v\x80`\x84\x1d \x18a\x07\x08F\xd8\x01\x82\x11v\x80`\x84\x1d \x18a\x07\x08F\xd8\x01\x82\x11v\x80`\x84\x1d \x18a\x07\x08F\xd8\x01\x82\x11v\x80`\x84\x1d \x18a\x07\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00`p-\x8c\x8d\xfd>\xbf}\xfb\xc2\xfc\xd8\xd8\xdc\xfc\xb6m\xbf\x95\xc7\x9a\xd5\x19\x00ji\xb1(\xfel4\x1a\xa3\x8d\x94\xc6\x1b\xcd\xe6\x1f\xe51a\x07\xa8\xb1\xa5\xa0/\xe6\xb1T\xcd\xc2\x0ePg\x8d\xc6t*\x8a\xf9\xa2(\xfeZz\xf5^\xbdb\x07 \x94\x94\xfe\x06\x9eV\'\x83\xf5\xbey\xea\x00\x00\x00\x00IEND\xaeB`\x82')
            sess.add(plus)
            return "plus photo added"
        else:
            photo = Photo(num_uses=0)

            if "data" in kwargs:
                photo.data = kwargs.pop("data")

            if "caption" in kwargs:
                photo.caption = kwargs.pop("caption")

            if "name" in kwargs:
                photo.name = kwargs.pop("name")

            if "date_taken" in kwargs:
                photo.date_taken = kwargs.pop("date_taken")

            sess.add(Photo())

    def get_image(self, caption):
        plus_image_binary = sess.query(Photo).filter(Photo.caption == caption).first().data
        return io.BytesIO(plus_image_binary)

    def get_thumbnails(self):
        return_list = []
        thumbnail_ids = [timeline.thumbnail_photo_ID for timeline in sess.query(Timeline).all()]

        for timeline_number in range(len(thumbnail_ids)):
            name = sess.query(Timeline)[timeline_number].name
            photo_data = sess.query(Photo).filter(Photo.photo_ID == thumbnail_ids[timeline_number]).first().data()
            photo_data = io.BytesIO(photo_data)
            return_list.append(name, photo_data)

        return return_list

    def get_timeline_name(self, id):
        timeline_name = sess.query(Timeline).filter(Timeline.timeline_ID == id).first().name
        return timeline_name

    def get_thumbnail(self, id):
        thumbnail_id = sess.query(Timeline).filter(Timeline.timeline_ID == id).first().thumbnail_id
        photo_data = sess.query(Photo).filter(Photo.photo_ID == thumbnail_id)
        return photo_data

    def sort_timelines(self, factor):
        if factor == "A-Z":
            names = [timeline.name for timeline in sess.query(Timeline).all()]
            sorted_names = self.merge_sort(names, False)
            sorted_ids = [sess.query(Timeline).filter(Timeline.name == name).timeline_ID for name in sorted_names]
        elif factor == "Z-A":
            names = [timeline.name for timeline in sess.query(Timeline).all()]
            sorted_names = self.merge_sort(names, True)
            sorted_ids = [sess.query(Timeline).filter(Timeline.name == name).timeline_ID for name in sorted_names]
        elif factor == "Recently modified":
            dates = [timeline.date_modified for timeline in sess.query(Timeline).all()]
            sorted_dates = self.merge_sort(dates, True)
            sorted_ids = [sess.query(Timeline).filter(Timeline.date_modified == date).timeline_ID for date in sorted_dates]
        return sorted_ids

    def merge_sort(self, items, reverse):
        length = len(items)

        if length == 1 or length == 0:
            return items

        else:
            first = self.merge_sort(items[:length // 2])
            second = self.merge_sort(items[length // 2:])
            sort = []

            while first or second:
                if not second:
                    sort.append(first.pop(0))
                elif not first:
                    sort.append(second.pop(0))
                elif first[0] > second[0] and reverse == False:
                    sort.append(first.pop(0))
                else:
                    sort.append(second.pop(0))

            return sort
